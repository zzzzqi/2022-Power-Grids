# -*- coding: utf-8 -*-
"""cnn_catsdogs_sample00.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mznRzHUYZbJOTtwdP3YAeDsorV7SIw2e
"""

import tensorflow as tf

from tensorflow.keras import datasets, layers, models
import matplotlib.pyplot as plt

model = models.Sequential()

# Add convolution layer, assuming 32 kernels and size of kernel as 3 * 3
# The number of kernels could be customised
model.add(layers.Conv2D(32, (3, 3), activation='relu', input_shape=(128, 128, 3)))

# Add max pooling layer, assuming size of pool as 2 * 2
model.add(layers.MaxPool2D(pool_size=(2, 2)))

# Add another set of convolutional layers here, before flattening
model.add(layers.Conv2D(32, (3, 3), activation='relu'))
model.add(layers.MaxPool2D(pool_size=(2, 2)))

# Add flattening, where the output is the input of the ANN
model.add(layers.Flatten())

# Add full connection, where ANN is built with 1 hidden layer and 1 output layer
# There are 128 neurons included in the hidden layer
model.add(layers.Dense(units=128, activation='relu'))

# Add another hidden layer
model.add(layers.Dense(units=128, activation='relu'))

# Add the sigmoid layer
model.add(layers.Dense(units=1, activation='sigmoid'))

# Configure the CNN
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

# Fit the CNN to the images
from keras.preprocessing.image import ImageDataGenerator

train_datagen = ImageDataGenerator(rescale=1. / 255,
                                   shear_range=0.2,
                                   zoom_range=0.2,
                                   horizontal_flip=True)
test_datagen = ImageDataGenerator(rescale=1. / 255)

# Enable mounting Google Drive locally
from google.colab import drive

drive.mount('/content/drive')

training_set = train_datagen.flow_from_directory('/content/drive/My Drive/cat_dog_dataset/training_set',
                                                 target_size=(128, 128),
                                                 batch_size=32,
                                                 class_mode='binary')

test_set = test_datagen.flow_from_directory('/content/drive/My Drive/cat_dog_dataset/test_set',
                                            target_size=(128, 128),
                                            batch_size=32,
                                            class_mode='binary')

model.fit(training_set,
          epochs=25,
          validation_data=test_set,
          validation_steps=62.5)

model.save('/content/drive/My Drive/cnn_catsdogs_sample00_model')

model.save('/content/drive/My Drive/cnn_catsdogs_sample00_model.h5')

