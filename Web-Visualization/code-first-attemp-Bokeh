from bokeh.plotting import figure, show
from bokeh.models import NumeralTickFormatter
from bokeh.layouts import gridplot

# prepare some data
x1 = [0.1, 0.15, 0.2, 0.3, 0.33, 0.25, 0.27, 0.13, 0.23, 0.35]
x2 = [0.77, 0.8, 0.85, 0.87, 0.88, 0.95, 0.73, 0.69, 0.82]
y1 = [0.4, 0.5, 0.5, 0.5, 0.63, 0.65, 0.78, 0.59, 0.68, 0.55]
y2 = [0.33, 0.5, 0.4, 0.35, 0.25, 0.45, 0.42, 0.29, 0.37]
y3 = [0.88, 0.77, 0.73, 0.88, 0.83, 0.85, 0.78, 0.79, 0.82]


# create a plot
p1 = figure(
    title="Output results",
    sizing_mode="stretch_width",
    max_width=700,
    height=500,
    x_range=(0, 1),
    y_range=(0, 1),
    tooltips="index: **, PQD category : **",
)

# style the headline
p1.title.text_font_size = "25px"

# format axes ticks
p1.yaxis[0].formatter = NumeralTickFormatter(format="0.00")
p1.xaxis[0].formatter = NumeralTickFormatter(format="0.00")

# add a renderer
p1.circle(x1, y1, legend_label="data1", fill_color="red", size=10)
p1.circle(x2, y2, legend_label="data2", fill_color="blue", size=10)
p1.circle(x2, y3, legend_label="data3", fill_color="orange", size=10)

p1.legend.click_policy="hide"

# change some things about the x-axis

p1.xaxis.axis_label = "possibility1"

# change some things about the y-axis

p1.yaxis.axis_label = "possibility2"

p1.yaxis.major_label_orientation = "vertical"

# activate toolbar autohide
p1.toolbar.autohide = True




# create a plot
p2 = figure(
    title="Similar Events",
    sizing_mode="stretch_width",
    max_width=700,
    height=500,
    x_range=(0, 1),
    y_range=(0, 1),
    tooltips="index: **, PQD category : **",
)




import numpy as np

from bokeh.io import curdoc
from bokeh.layouts import column, row
from bokeh.models import ColumnDataSource, Slider, TextInput
from bokeh.plotting import figure

# Set up data
N = 200
x1 = np.linspace(0, 20*np.pi, N)
x2 = np.linspace(-(1/2)*np.pi, 20*np.pi, N)
x3 = np.linspace(-(1/3)*np.pi, 20*np.pi, N)
y1 = 2*np.sin(x1)
y2 = 2*np.sin(x2)
y3 = 2*np.sin(x3)
source1 = ColumnDataSource(data=dict(x=x1, y=y1))
source2 = ColumnDataSource(data=dict(x=x2+(1/2)*np.pi, y=y2))
source3 = ColumnDataSource(data=dict(x=x3+(1/3)*np.pi, y=y3))


# Set up plot
p3 = figure(sizing_mode="stretch_width", height=300, title="similar event's waveform",
              tools="crosshair,pan,reset,save,wheel_zoom",
              x_range=[0, 4*np.pi], y_range=[-2.5, 2.5])

p3.line('x', 'y', legend_label="waveform1", source=source1, line_width=3, line_alpha=0.6, color="red")
p3.line('x', 'y', legend_label="waveform2", source=source2, line_width=3, line_alpha=0.6, color="blue")
p3.line('x', 'y', legend_label="waveform3", source=source3, line_width=3, line_alpha=0.6, color="black")

p3.legend.click_policy="hide"

show(column(row(p1,p2),p3))
